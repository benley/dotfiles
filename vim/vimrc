set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
source ~/.vim/bundlelist.vim

" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles

filetype plugin indent on

set backspace=indent,eol,start
set expandtab
set noerrorbells
set esckeys
set incsearch
" This will highlight all matches from the previous search.
" set hlsearch
set ignorecase
set smartcase
set joinspaces
set autowrite
" Ignore compiled files when completing paths:
set wildignore=*.o,*~,*.pyc,*.pyo,*.class,*.hi,*.obj
set wildmenu
"set nobackup
set hidden
set magic
set laststatus=2 " Keep the status bar even when there's only one window.

if has("mouse")
  set mouse=a
endif

"  set   autowrite
"  set   nobackup
"  set   hidden
"  set   highlight=8r,db,es,hs,mb,Mr,nu,rs,sr,tb,vr,ws
"  set   modelines=1    default is 5
set   ruler
"set   shiftwidth=4
set   showcmd
set   showmatch
set   showmode
set   nostartofline
"set   tabstop=8
set   textwidth=79
set   visualbell t_vb=
"       much more precise without these.  only practical in a few situations, so
"       leave it here for easy editing
set   whichwrap=b,s,h,l,<,>,[,]
"set  nowrapscan
set   nowritebackup

" autocmd!

"map   K  gq

set nonumber

"autocmd FileType c,cpp set ts=4 formatoptions=cro cindent smarttab tw=0 nowrap sidescroll=20 listchars=extends:$
"autocmd FileType php3,php4 set ts=4 formatoptions=cro smartindent smarttab tw=0 nowrap sidescroll=20 listchars=extends:$
"autocmd FileType c,cpp nmap <tab> =0<CR>
autocmd FileType mail set tw=72 nowrap
autocmd FileType python call BenCode()
      \ | setlocal tags+=$HOME/.vim/tags/python27.tags
      \ | setlocal indentexpr=GetGooglePythonIndent(v:lnum)
      \ | setlocal omnifunc=pythoncomplete#Complete
      \ | call PythonGFJump()
" Trim trailing whitespace on save: (I can't seem to make this work)
" autocmd BufWritePre *.py normal m`:%s/\s\+$//e``
autocmd FileType conf setlocal foldcolumn=0 modeline modelines=5
autocmd FileType sh call BenCode()
autocmd FileType vim call BenCode()
autocmd FileType ruby call BenCode()
autocmd FileType gitcommit set tw=71
autocmd FileType make set noexpandtab
autocmd FileType yaml setlocal sw=2 ts=2 modeline modelines=5 ai

fun! PythonGFJump()
  " Attempts to make `gf` file jumping work for python imports.
  python << EOF
import os
import sys
import vim
for p in sys.path:
  if os.path.isdir(p):
    vim.command(r"set path+=%s" % p.replace(" ", r"\ "))
EOF
endfun

fun! BenCode()
  "I hate this right now for some reason
  "setlocal colorcolumn=+1,+2 foldcolumn=5 foldmethod=indent number foldnestmax=4
  match OverLength /\%>80v.\+/
  "setlocal shiftwidth=2 smartindent autoindent expandtab
  setlocal shiftwidth=2 expandtab
endfun

"highlight RedundantSpaces ctermbg=red guibg=red
"match RedundantSpaces /\s\+$\| \+\ze\t/

" Oh man this is annoying. Resizes your window. Maybe okay in gui mode?
"if &diff
"  set lines=50
"  set columns=180
"endif

" This was for perforce or something.
fun! FixDescription()
  if search("<enter description here>") > 0
    normal C
    startins!
  elseif search("^Description:")
    normal 2w
  endif
endfun

""" Begin paste copied from /usr/share/vim/vim73/filetype.vim:
" Pattern used to match file names which should not be inspected.
" Currently finds compressed files.
if !exists("g:ft_ignore_pat")
  let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'
endif

" Function used for patterns that end in a star: don't set the filetype if the
" file name matches ft_ignore_pat.
func! s:StarSetf(ft)
  if expand("<amatch>") !~ g:ft_ignore_pat
    exe 'setf ' . a:ft
  endif
endfunc
""" End paste

augroup filetypedetect
  " auto handling for perforce commit messages:
  au BufNewFile,BufRead /tmp/*[pg]4[_-]*
        \ setlocal wrap noexpandtabs
        \ setlocal tw=65
        \ call FixDescription()
  " Handle more filenames for bind configs and zone files
  au BufNewFile,BufRead named.conf.*,zones.*
        \ call s:StarSetf('named')
  au BufNewFile,BufRead */zones/db.*
        \ call s:StarSetf('bindzone')
augroup end

" obnoxious crosshairs thing
"if version >= 700
"  hi CursorColumn term=reverse ctermbg=grey
"  hi clear CursorLine
"  hi CursorLine term=reverse ctermbg=grey
"  hi LineNr ctermfg=red ctermbg=black
"  se cul cuc
"endif

autocmd ColorScheme * highlight OverLength ctermfg=red guifg=red

" http://vim.wikia.com/wiki/Highlight_unwanted_spaces
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/

" ConqueTerm is more than willing to use vim syntax highlighting, but it makes
" shells really quite slow.
let g:ConqueTerm_Color=0

Bundle "Tagbar"
nnoremap <silent> <F9> :TagbarToggle<CR>
set title titlestring=%<%f\ %(%{tagbar#currenttag('[%s]','','s')}%)
if has("unix")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    if filereadable("/usr/local/bin/ctags")
      let g:tagbar_ctags_bin = "/usr/local/bin/ctags"
    elseif filereadable("/opt/local/bin/ctags")
      let g:tagbar_ctags_bin = "/opt/local/bin/ctags"
    endif
  endif
endif

" https://github.com/majutsushi/tagbar/wiki
" (requires custom stuff in ~/.ctags as well)
let g:tagbar_type_markdown = {
      \ 'ctagstype': 'markdown',
      \ 'kinds': ['h:Heading_L1',
      \           'i:Heading_L2',
      \           'k:Heading_L3'
      \          ]}


"Bundle "taglist.vim"
"if has("unix")
"  let s:uname = system("uname")
"  if s:uname == "Darwin\n"
"    if filereadable("/opt/local/bin/ctags")
"      let Tlist_Ctags_Cmd = "/opt/local/bin/ctags"
"    elseif filereadable("/usr/local/bin/ctags")
"      let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
"    endif
"  endif
"endif

" Show the tags menu in gvim.
"let Tlist_Show_Menu = 1

" Make TagList process files even if the taglist window isn't open.
"let Tlist_Process_File_Always = 1

" Set the terminal window title bar to be the current tag. Awesome.
" (this benefits from Tlist_Process_File_Always=1)
"set title titlestring=%<%f\ %([%{Tlist_Get_Tagname_By_Line()}]%)

" From http://vim.wikia.com/wiki/Accessing_the_system_clipboard:
" Some hackery to get clipboard support back when running with mouse support in
" a non-X11 terminal (like iterm2).
" enter visual selection, then:
" :cz to copy to the x11 Clipboard
" :cx to copy to x11 Primary Selection
" :cv to copy to x11 Secondary Selection (wtf is this for, even?)
" :pz to paste from x11 Clipboard
" :px to paste from x11 Primary Selection
" :pv to paste vrom x11 Secondary Selection
" TODO(benley): I'm sure there is a way to do this without needing a : first
command -range Cz :silent :<line1>,<line2>w !xsel -i -b
command -range Cx :silent :<line1>,<line2>w !xsel -i -p
command -range Cv :silent :<line1>,<line2>w !xsel -i -s
cabbrev cz Cz
cabbrev cx Cx
cabbrev cv Cv

command -range Pz :silent :r !xsel -o -b
command -range Px :silent :r !xsel -o -p
command -range Pv :silent :r !xsel -o -s

cabbrev pz Pz
cabbrev px Px
cabbrev pv Pv

" WinManager blahblah
let g:winManagerWindowLayout = "BufExplorer,FileExplorer|TagList"

if has("gui")
  " I don't know why this doesn't work when quoted.
  "set guifont=Inconsolata:h16
  "set guifont=Monofur\ 13
  if has("macunix")
    set guifont=Menlo\ Regular\:h14
  else
    set guifont=DejaVu\ Sans\ Mono\ 12
  endif
  set bg=dark
  " Turn off the toolbar.
  "set guioptions-=T
endif

""" Begin python style
" From http://google-styleguide.googlecode.com/svn/trunk/google_python_style.vim
" See also http://google-styleguide.googlecode.com/svn/trunk/pyguide.html
let s:maxoff = 50 " maximum number of lines to look backwards.
function GetGooglePythonIndent(lnum)
  " Indent inside parens.
  " Align with the open paren unless it is at the end of the line.
  " E.g.
  "   open_paren_not_at_EOL(100,
  "                         (200,
  "                          300),
  "                         400)
  "   open_paren_at_EOL(
  "       100, 200, 300, 400)
  call cursor(a:lnum, 1)
  let [par_line, par_col] = searchpairpos('(\|{\|\[', '', ')\|}\|\]', 'bW',
        \ "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :"
        \ . " synIDattr(synID(line('.'), col('.'), 1), 'name')"
        \ . " =~ '\\(Comment\\|String\\)$'")
  if par_line > 0
    call cursor(par_line, 1)
    if par_col != col("$") - 1
      return par_col
    endif
  endif

  " Delegate the rest to the original function.
  return GetPythonIndent(a:lnum)
endfunction

" This will double-indent nested and open-paren indents:
"let pyindent_nested_paren="&sw*2"
"let pyindent_open_paren="&sw*2"

" But if we're doing pep8 style (4-space indent) we just want 1x, which is
" conveniently the same value as a double-indent in google style, so:
let pyindent_nested_paren = 4
let pyindent_open_paren = 4
""" End python style

let g:syntastic_check_on_open = 1
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'

syntax on
" The terminal is already set to the right bg/fg colors, so:
let g:solarized_termtrans=1
set bg=dark
colorscheme zenburn
" Looks nice with zenburn:
hi ColorColumn guibg=#484848
